var fs = require('fs');

module.exports = {
  book: {
    assets: "./book",
    css: ["collapses.css","custom.css"]
  },

  blocks: {
    // To display some content in a highlighted box, use:
    //    "{% highlight %} Content {% endhighlight %}"
    // Customization is possible with two parameters:
    // - "action"
    //    - Used to display appropriate message
    //    - Value can be one of ["success", "warn", "note"]
    //    - "{% highlight action="success" %} Content {% endhighlight %}"
    // - "backgroundColor"
    highlight: {
      process: function(highlightContent) {

        msgMap = {
          "success":"Success!",
          "warn":"Warning:",
          "note":"Note:"
        };

        colorMap = {
          "red": "#ff4d4d",
          "green": "#8cd98c",
          "yellow": "#ffff99"
        };

        var message = (highlightContent.body).toString().trim();
        var htmlMsg = "<div class=\"successPart\" ";
        if (highlightContent.kwargs.hasOwnProperty("backgroundColor")) {
          htmlMsg += "style=\"background-color:"
                  +  colorMap[highlightContent.kwargs["backgroundColor"]]+"\"";
        }
        htmlMsg += ">";
        if (highlightContent.kwargs.hasOwnProperty("action")){
          action = msgMap[highlightContent.kwargs["action"]]
          htmlMsg += "\n<b>" + action + "</b> ";
        }
        htmlMsg += message;
        htmlMsg += "</div>";
        return htmlMsg;
      }
    },

    // To show contents of a file in a collapsible panel use:
    //    "{% catFileInPdk %} filePath {% endcatFileInPdk %}"
    // The file path needs to be with relative to $VAPI_PDK
    catFileInPdk: {
      process: function(catFilePath) {
        var filePath = (catFilePath.body).toString().trim();
        var id = "cat-" + filePath.substring(filePath.lastIndexOf('/')+1).replace('.','-');
        var pdkDir = "../../";
        var outputContent = fs.readFileSync(pdkDir + filePath, 'utf8');
        outputContent = outputContent.replace(/\</g,"&lt;");
        outputContent = outputContent.replace(/\>/g,"&gt;");
        outputContent = outputContent.replace(/\r?\n/g ," <br/>\n");
        outputContent = outputContent.replace(/\s/g,"&nbsp;");
        var htmlCat = "<div class=\"codePart\">\n";
        htmlCat += "vapi-pdk$ cat " + filePath + "\n";
        htmlCat += "<span class=\"collapseTitle collapsed\" data-toggle=\"collapse\" ";
        htmlCat += "data-target=\"#" + id + "\">&nbsp;</span>\n";
        htmlCat += "<div id=\"" + id + "\" class=\"collapseContent collapse\">\n";
        htmlCat += outputContent;
        htmlCat += "</div></div>";
        return htmlCat;
      }
    },

    /*
      - To show some content in a panel or a collapsible panel use the panel block.
      - The content of this block should be a JSON object with two elements
          {% panel %}
            {
              "panelContentFilePath": "<relative path to a .txt file>",
              "collapsedContentFilePath": "<relative path to a .txt file>"
            }
          {% endpanel %}
      - "collapsedContentFilePath" is optional.
      - File path is relative to the directory of the md file referencing it.
      - Typical case is when the panel contains command(s) and the collapsed content
        would be the output of the command. In this case, the conventions are:
        - The file containing the command would be put under a directory named 'commands'
          in same level as the the page itself.
        - Output produced by those commands would be put in a file in the 'outputs' directory
          at the same level.
        - Both 'commands' and 'outputs' directories will have subdirectories for each language
          supported.
        - For example, the instructions to start a java provider in the java.md page would
          reference necessary commands from commands/java/linuxRunServer.txt
        - Apart from the commands themselves, these files would contain the prompts indicating
          the location from which those commands would be run from and pretty printing formatting
          including '<br/>'s and $npsp's.
        - When these files would eventually be used to automate tutorial validation, these
          formatting additions would be striped out.
    */
    panel: {
      process: function(panelSpec) {
        var panelFilesJson = JSON.parse(panelSpec.body);
        var currentDir = this.ctx.file.path.substring(0, this.ctx.file.path.lastIndexOf('/'));
        var panelFilePath = currentDir + "/" + panelFilesJson.panelContentFilePath;
        var panelContent = fs.readFileSync(panelFilePath, 'utf8');

        var htmlDiv = "<div class=\"codePart\">\n";
        htmlDiv += panelContent.trim().replace(/\r?\n/g ," <br/>\n");

        if (panelFilesJson.hasOwnProperty("collapsedContentFilePath")) {
          var id = "collapsed-" + panelFilesJson.collapsedContentFilePath.replace(/\.|\//g,'-');
          var collapsedFilePath = currentDir + "/" + panelFilesJson.collapsedContentFilePath;
          var outputContent = fs.readFileSync(collapsedFilePath, 'utf8');
          outputContent = outputContent.trim().replace(/\r?\n/g ," <br/>\n");
          htmlDiv += "<span class=\"collapseTitle collapsed\" data-toggle=\"collapse\" ";
          htmlDiv += "data-target=\"#" + id + "\">&nbsp;</span>\n";
          htmlDiv += "<div id=\"" + id + "\" class=\"collapseContent collapse\">\n";
          htmlDiv += outputContent;
          htmlDiv += "</div>";
        }

        htmlDiv += "</div>";
        return htmlDiv;
      }
    },

    /*
      - To show contents in a tabular format, use the tabs block.
      - The content of this block should be a list of JSON objects - one per tab:
          {% tabs %}
            [
              {
                "displayName": "Tab title"
                "panelContentFilePath": "<relative path to a .txt file>",
                "collapsedContentFilePath": "<relative path to a .txt file>"
              }, ...
            ]
          {% endtabs %}
      - First element in the list is the default active tab.
      - "collapsedContentFilePath" is optional.
      - File path is relative to the directory of the md file referencing it.
      - The conventions for "panelContentFilePath" and "collapsedContentFilePath"
        are same as that for the panel block.
    */
    tabs: {
      process: function(tabsSpec) {
        var tabsJson = JSON.parse(tabsSpec.body);
        var htmlDiv = "<div>\n";
        htmlDiv += "<ul class=\"nav nav-tabs\">\n";

        for(var i=0 ; i< tabsJson.length; i++) {
          var id = "panel-" + tabsJson[i].panelContentFilePath.replace(/\.|\//g,'-');
          var displayName = tabsJson[i].displayName;
          if (i == 0) {
            htmlDiv += "<li class=\"active\">\n";
          } else {
            htmlDiv += "<li>\n";
          }
          htmlDiv += "<a id=\"" + id + "-tab\" href=\"#" + id + "\" data-toggle=\"tab\">" + displayName + "</a>\n";
          htmlDiv += "</li>\n";
        }
        htmlDiv += "</ul>\n";
        htmlDiv += "<div class=\"codePart\">\n";
        htmlDiv += "<div class=\"tab-content\">\n";

        var currentDir = this.ctx.file.path.substring(0, this.ctx.file.path.lastIndexOf('/'));
        for(var i = 0; i < tabsJson.length; i++) {
          var id = "panel-" + tabsJson[i].panelContentFilePath.replace(/\.|\//g,'-');
          var panelFilePath = currentDir + "/" + tabsJson[i].panelContentFilePath;
          var panelContent = fs.readFileSync(panelFilePath, 'utf8');

          if(i == 0){
            htmlDiv += "<div class=\"tab-pane active\" id=\"" + id + "\">";
          } else {
            htmlDiv += "<div class=\"tab-pane\" id=\"" + id + "\">";
          }

          htmlDiv += panelContent.trim().replace(/\r?\n/g ," <br/>\n");


          if (tabsJson[i].hasOwnProperty("collapsedContentFilePath")) {
            var id = "collapsed-" + tabsJson[i].collapsedContentFilePath.replace(/\.|\//g,'-');
            var collapsedFilePath = currentDir + "/" + tabsJson[i].collapsedContentFilePath;
            var outputContent = fs.readFileSync(collapsedFilePath, 'utf8');
            outputContent = outputContent.trim().replace(/\r?\n/g ," <br/>\n");
            htmlDiv += "<span class=\"collapseTitle collapsed\" data-toggle=\"collapse\" ";
            htmlDiv += "data-target=\"#" + id + "\">&nbsp;</span>\n";
            htmlDiv += "<div id=\"" + id + "\" class=\"collapseContent collapse\">\n";
            htmlDiv += outputContent;
            htmlDiv += "</div>";
          }
          htmlDiv += "</div>";
        }
        htmlDiv += "</div></div></div>";
        return htmlDiv;
      }
    }
  }
};

