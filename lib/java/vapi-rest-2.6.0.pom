<?xml version="1.0" encoding="UTF-8"?>
<!-- VMware Confidential 2015-2016 VMware, Inc. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>vapi</artifactId>
    <groupId>com.vmware.vapi</groupId>
    <version>2.6.0</version>
  </parent>
  <groupId>com.vmware.vapi</groupId>
  <artifactId>vapi-rest</artifactId>
  <packaging>jar</packaging>
  <name>vapi-rest</name>
  <description>vAPI REST</description>

  <properties>
    <build.generated.sources>${project.build.directory}/generated-sources</build.generated.sources>
    <build.generated.sources.rest.navigation>${project.build.directory}/generated-sources/rest-navigation</build.generated.sources.rest.navigation>
    <samples.vmodl>${project.basedir}/src/test/resources/vmodl</samples.vmodl>
    <rest.vmodl>${project.basedir}/src/main/vmodl</rest.vmodl>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Create folder for the bindings generation</id>
            <phase>initialize</phase>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <!-- generate some demo/test classes from VMODL2 -->
          <execution>
            <id>generate java bindings for demo svc/test</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${idlJavaGenerator}</executable>
              <workingDirectory>${java-toolkit.generator.bin.dir}</workingDirectory>
              <arguments>
                <argument>--output</argument>
                <argument>${build.generated.sources}</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${samples.vmodl}/Demo.vmodl</argument>
                <argument>${samples.vmodl}/DemoEcho.vmodl</argument>
                <argument>${samples.vmodl}/Asynchronous.vmodl</argument>
                <argument>${samples.vmodl}/ToyVM.vmodl</argument>
                <argument>${samples.vmodl}/Performer.vmodl</argument>
                <argument>${samples.vmodl}/Security.vmodl</argument>
                <argument>${samples.vmodl}/RestMetadataTest.vmodl</argument>
                <argument>${samples.vmodl}/RestClientTest.vmodl</argument>
                <argument>${samples.vmodl}/RestAnnotations.vmodl</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>generate java bindings for rest navigation</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${idlJavaGenerator}</executable>
              <workingDirectory>${java-toolkit.generator.bin.dir}</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>rest_navigation</argument>
                <argument>--output</argument>
                <argument>${build.generated.sources.rest.navigation}</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${rest.vmodl}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <!-- this is not delivered by vapi-core-java ( in ${idl.toolkit.models} ) -->
            <id>Generate metadata for vAPI common VMODL2</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>vapi_common</argument>
                <argument>--json-writer</argument>
                <argument>${build.generated.sources.rest.navigation}/metadata/vapi.common.json</argument>
                <!-- Base64 encode literals in doc model, e.g. {@code } content,
                     otherwise some of the resulting JSON is invalid  -->
                <argument>-Ddoc.model.literal.encoded=1</argument>
                <argument>${idl.toolkit.models}/vapi</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>generate metadata for demo/test</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>RestTests</argument>
                <argument>--json-writer</argument>
                <argument>${build.generated.sources}/metadata/rest.tests.json</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>--metadata</argument>
                <argument>${samples.vmodl}/authn.ini</argument>
                <argument>${samples.vmodl}/Demo.vmodl</argument>
                <argument>${samples.vmodl}/DemoEcho.vmodl</argument>
                <argument>${samples.vmodl}/Asynchronous.vmodl</argument>
                <argument>${samples.vmodl}/ToyVM.vmodl</argument>
                <argument>${samples.vmodl}/Performer.vmodl</argument>
                <argument>${samples.vmodl}/Security.vmodl</argument>
                <argument>${samples.vmodl}/RestMetadataTest.vmodl</argument>
                <argument>${samples.vmodl}/RestClientTest.vmodl</argument>
                <argument>${samples.vmodl}/RestAnnotations.vmodl</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>generate metadata for rest navigation</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>RestNavigation</argument>
                <argument>--json-writer</argument>
                <argument>${build.generated.sources.rest.navigation}/metadata/rest.navigation.json</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${rest.vmodl}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add generated sources for demo/test</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${build.generated.sources}/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add generated sources for rest navigation</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${build.generated.sources.rest.navigation}/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add generated metadata for tests</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${build.generated.sources}/metadata</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>add generated metadata for rest navigation</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${build.generated.sources.rest.navigation}/metadata</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <suiteXmlFiles>
            <suiteXmlFile>${basedir}/conf/testng/testng-native-suite.xml</suiteXmlFile>
            <suiteXmlFile>${basedir}/conf/testng/testng-junit-suite.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.springsource.bundlor</groupId>
        <artifactId>com.springsource.bundlor.maven</artifactId>
        <configuration>
          <manifestTemplatePath>${basedir}/conf/osgi/restTemplate.mf</manifestTemplatePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-oxm</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Jackson -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>

    <!-- vAPI modules -->
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-service</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-lib</artifactId>
    </dependency>

    <!-- apache commons -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
    </dependency>

    <!-- Log4J -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

    <!-- JUnit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- XmlUnit -->
    <dependency>
      <groupId>xmlunit</groupId>
      <artifactId>xmlunit</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- EasyMock -->
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- TestNG -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat-servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.skyscreamer</groupId>
      <artifactId>jsonassert</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Adding woodstox dependency as this modifies the XML rendering behavior.
         If this is removed the XMLs resulting from REST API have no encoding
         attribute and single quotes are used for XML version both causing test
         failures.
    -->
    <dependency>
      <groupId>org.codehaus.woodstox</groupId>
      <artifactId>woodstox-core-asl</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
