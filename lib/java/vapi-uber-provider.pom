<?xml version="1.0" encoding="UTF-8"?>
<!-- VMware Confidential 2012-2016 VMware, Inc. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>vapi</artifactId>
    <groupId>com.vmware.vapi</groupId>
    <version>2.6.0</version>
  </parent>
  <groupId>com.vmware.vapi</groupId>
  <artifactId>vapi-uber-provider</artifactId>
  <packaging>jar</packaging>
  <name>vapi-uber-provider</name>
  <description>Java implementations for Uber VMODL2 API</description>

  <properties>
    <gen.java.dest>${project.build.directory}/java-bindings</gen.java.dest>
    <uber.provider.assemble.dir>${project.build.directory}/appassembler</uber.provider.assemble.dir>
    <skipGenerate />
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Generate Java bindings for the test Uber VMODL2</id>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${idlJavaGenerator}</executable>
              <workingDirectory>${java-toolkit.generator.bin.dir}</workingDirectory>
              <arguments>
                <argument>--output</argument>
                <argument>${gen.java.dest}</argument>
                <argument>--profile</argument>
                <argument>provider</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>--metadata</argument>
                <argument>${idl.toolkit.models}/test/ini/authz.ini</argument>
                <!-- input VMODL2 location -->
                <argument>${idl.toolkit.models}/test/</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>Copy uber vmodl2 metadata</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${gen.java.dest}/metadata</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${idl.toolkit.models}</directory>
                  <includes>
                    <include>vmodl.test.uber.json</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Add source folder for generated Java bindings</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${gen.java.dest}/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>Add resource folder for vmodl2 metadata</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${gen.java.dest}/metadata</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.springsource.bundlor</groupId>
        <artifactId>com.springsource.bundlor.maven</artifactId>
        <configuration>
          <manifestTemplatePath>${basedir}/conf/osgi/uberProviderTemplate.mf</manifestTemplatePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>assemble</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <programs>
            <program>
              <id>vapi-uber-provider</id>
              <mainClass>com.vmware.vapi.server.Server</mainClass>
            </program>
          </programs>
          <assembleDirectory>${uber.provider.assemble.dir}</assembleDirectory>
          <binFileExtensions>
            <unix>.sh</unix>
          </binFileExtensions>
          <binFolder>bin</binFolder>
          <repositoryLayout>flat</repositoryLayout>
          <repositoryName>lib</repositoryName>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>publish-deliverables</id>
            <phase>install</phase>
            <configuration combine.self="override">
              <target if="build.publish">
                <copy file="${basedir}/pom.xml" tofile="${java.runtime.publish.dir}/${project.name}.pom"/>
                <copy file="${basedir}/pom.xml" tofile="${java.runtime.publish.dir}/${project.name}-${project.version}.pom"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-service</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-common-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-lib</artifactId>
    </dependency>
  </dependencies>
</project>
