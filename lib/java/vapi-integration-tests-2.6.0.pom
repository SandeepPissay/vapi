<?xml version="1.0" encoding="UTF-8"?>
<!-- VMware Confidential 2012-2016 VMware, Inc. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>vapi</artifactId>
    <groupId>com.vmware.vapi</groupId>
    <version>2.6.0</version>
  </parent>
  <groupId>com.vmware.vapi</groupId>
  <artifactId>vapi-integration-tests</artifactId>
  <packaging>jar</packaging>
  <name>vapi-integration-tests</name>
  <description>Integration tests of vapi</description>

  <properties>
    <gen.java.dest>${project.build.directory}/java-bindings</gen.java.dest>
    <skipGenerate />
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Generate test VMODL2 services</id>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${idlJavaGenerator}</executable>
              <workingDirectory>${java-toolkit.generator.bin.dir}</workingDirectory>
              <arguments>
                <argument>--output</argument>
                <argument>${gen.java.dest}</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${idl.toolkit.models}/oldtest/Echo.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/EchoConstants.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/EchoRecursive.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/EchoGenerics.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/ErrorReporting.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/ErrorReportingAsync.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/sample/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/async/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/enumerations/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/errors/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/l10n</argument>
                <argument>${idl.toolkit.models}/oldtest/test/naming/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/python/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/security/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/structures/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/serialization/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/unions/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/versioning/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/dynamic_structures/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/interposer/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/is/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/id/</argument>
                <argument>${idl.toolkit.models}/oldtest/is/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/crud/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/abort/</argument>
                <argument>${idl.toolkit.models}/oldtest/package-info.vmodl</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>Generate test VMODL2 services, with --package-suffix</id>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${idlJavaGenerator}</executable>
              <workingDirectory>${java-toolkit.generator.bin.dir}</workingDirectory>
              <arguments>
                <argument>--output</argument>
                <argument>${gen.java.dest}</argument>
                <argument>--no-warn</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>--package-suffix</argument>
                <argument>test_suffix</argument>
                <argument>${idl.toolkit.models}/oldtest/Echo.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/EchoConstants.vmodl</argument>
                <!-- the following ones are only generated and compiled (no tests) -->
                <argument>${idl.toolkit.models}/oldtest/ErrorReporting.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/test/unions/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/structures/IncludableStructures.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/test/structures/diff/AnotherTopLevelStruct.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/package-info.vmodl</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>Generate metadata for oldtest vmodl2</id>
            <phase>generate-resources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>integration_tests</argument>
                <argument>--json-writer</argument>
                <argument>${gen.java.dest}/metadata/integration_tests.json</argument>
                <argument>--no-warn</argument>
                <argument>--metadata</argument>
                <argument>${project.basedir}/src/test/resources/vapi-security-authn-config.ini</argument>
                <argument>--metadata</argument>
                <argument>${project.basedir}/src/test/resources/authz.ini</argument>
                <argument>--metadata</argument>
                <argument>${project.basedir}/src/test/resources/metadata-integration-tests-routing.ini</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${idl.toolkit.models}/oldtest/test/security/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/interop/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/id/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/crud/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/errors/</argument>
                <argument>${idl.toolkit.models}/oldtest/test/structures/</argument>
                <argument>${idl.toolkit.models}/oldtest/RoutingTest.vmodl</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <!-- This metadata is not delivered, by the vapi-core-idl (/publish/models) -->
            <id>Generate metadata for vapi.std</id>
            <phase>generate-resources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>vapi_std</argument>
                <argument>--json-writer</argument>
                <argument>${gen.java.dest}/metadata/vapi.std.json</argument>
                <!-- Base64 encode literals in doc model, e.g. {@code } content,
                     otherwise some of the resulting JSON is invalid  -->
                <argument>-Ddoc.model.literal.encoded=1</argument>
                <argument>--no-warn</argument>
                <argument>${idl.toolkit.models}/vapi/std</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>Generate authentication metadata for LocalInterpositionTest</id>
            <phase>generate-resources</phase>
            <configuration>
              <skip>${skipGenerate}</skip>
              <executable>${vmodlParser}</executable>
              <workingDirectory>${idl.toolkit.root}/bin</workingDirectory>
              <arguments>
                <argument>--name</argument>
                <argument>interposition_tests</argument>
                <argument>--json-writer</argument>
                <argument>${gen.java.dest}/metadata/interposition_tests.json</argument>
                <argument>--no-warn</argument>
                <argument>--metadata</argument>
                <argument>${project.basedir}/src/test/resources/local-interposition-test-authn-config.ini</argument>
                <argument>--library</argument>
                <argument>${vapi.std.vmidl}</argument>
                <argument>${idl.toolkit.models}/oldtest/Echo.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/EchoConstants.vmodl</argument>
                <argument>${idl.toolkit.models}/oldtest/ErrorReporting.vmodl</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Add source folder for generated Java bindings</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${gen.java.dest}/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>Add resource folder for vmodl2 metadata</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${gen.java.dest}/metadata</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>com/vmware/vapi/interop/**/*Test.java</exclude>
            <exclude>com/vmware/vapi/provider/aggregator/ApiAggregatorTest.java</exclude>
          </excludes>
          <systemProperties>
            <property>
              <name>cross.propertiesfile</name>
              <value>/cross.properties</value>
            </property>
           <!-- TODO: we need a solution without reaching outside the source root of this build (java-toolkit/java-runtime). -->
            <property>
              <name>cross.python.resource_path</name>
              <value>${srcroot}/../../python-toolkit/test/test/resources</value>
            </property>
            <property>
              <name>cross.python.exe_path</name>
              <value>${srcroot}/../../python-toolkit/tools/testserver.sh</value>
            </property>
          </systemProperties>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.springsource.bundlor</groupId>
        <artifactId>com.springsource.bundlor.maven</artifactId>
        <configuration>
          <manifestTemplatePath>${basedir}/conf/osgi/testTemplate.mf</manifestTemplatePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar-no-fork</goal>
            </goals>
          </execution>
          <execution>
            <id>no-version</id>
            <goals>
              <goal>test-jar-no-fork</goal>
            </goals>
            <configuration>
              <finalName>${project.name}</finalName>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
          <execution>
            <id>no-version</id>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <configuration>
              <finalName>${project.name}</finalName>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>publish-deliverables</id>
            <phase>install</phase>
            <configuration combine.self="override">
              <target if="build.publish">
                <copy todir="${java.runtime.publish.dir}">
                  <fileset dir="${project.build.directory}">
                    <include name="*.jar"/>
                  </fileset>
                </copy>
                <copy file="${basedir}/pom.xml" tofile="${java.runtime.publish.dir}/${project.name}.pom"/>
                <copy file="${basedir}/pom.xml" tofile="${java.runtime.publish.dir}/${project.name}-${project.version}.pom"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>xmlunit</groupId>
      <artifactId>xmlunit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-inventoryservice</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-inventoryservice-publish</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-runtime</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-common</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-lib</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-authn</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vmware.vapi</groupId>
      <artifactId>vapi-metadata-service</artifactId>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
